ans1:
den=[2000,1000,500,200,100,50,20,10,5,2,1]
t=int(input("enter test cases"))
a=[]
def func(a):
  c=0
  while(c<=10):
    if((a-den[c])>=0):
      print(den[c])
      a=a-den[c]
    else:
      c=c+1
for n in range (t):
  a.append(int(input("enter amount")))
for amt in a:   
  count=0;

  print("for case ",count)
  func(amt)
  count=count+1

=============================================================================
ans2:

def LCSubStr(X, Y, m, n): 
	

	LCSuff = [[0 for k in range(n+1)] for l in range(m+1)] 
	

	result = 0

	for i in range(m + 1): 
		for j in range(n + 1): 
			if (i == 0 or j == 0): 
				LCSuff[i][j] = 0
			elif (X[i-1] == Y[j-1]): 
				LCSuff[i][j] = LCSuff[i-1][j-1] + 1
				result = max(result, LCSuff[i][j]) 
			else: 
				LCSuff[i][j] = 0
	return result 
Y=[]
X=[]
lx=[]
ly=[]
t=int(input("enter test cases"))
for n in range (t):
  x,y=input("lenghts of strings ").split()
  lx.append(x)
  ly.append(y)
  X.append(input("string1"))
  Y.append(input("string2"))

for i in range (t):
  
  m = len(X[i]) 
  n = len(Y[i]) 
  print(m,lx[i],n,ly[i])
  if((m==int(lx[i]))and(n==int(ly[i]))):
    print('Length of Longest Common Substring for case:',i,'is', 
					LCSubStr(X[i], Y[i], m, n)) 
  else:
    print("invalid string lengths for case:",i)

=============================================================================
ans3:

def count(S, m, c ): 

	if (c == 0): 
		return 1

	if (c < 0): 
		return 0; 


	if (m <=0 and c >= 1): 
		return 0

	return count( S, m - 1, c ) + count( S, m, c-S[m-1] ); 

t=int(input("enter test cases"))
elist=[]
cents=[]
size=[]
arr=[]
for n in range (t):
	size.append(int(input("SIze:")))
	elist.append(input("M enter elements"));
	cents.append(int(input("n:")))
for n in range(t):
  m=0;arr=[];
  inpstr = elist[n].split();
  for a in inpstr:
    arr.append(int(a)) 
  m = len(arr) 
  print(count(arr, m, cents[n])) 
=============================================================================
ans4:
a=[]
x=[]#not in
y=[]#pos
c=1
for i in range(3):
	X,Y,Z=input("Enter row").split()
	a.append(int(X))
	a.append(int(Y))
	a.append(int(Z))
while(c<=9):
  if(a.count(c)>0):
    c=c+1
  else:
    x.append(c)
    c=c+1
for n, i in enumerate(a):
  if i == 0:
    a[n] = x.pop()
print(a)

=============================================================================
ans5:

def maxSubArraySum(a,size): 

	max_so_far = 0
	max_ending_here = 0
	start = 0
	end = 0
	s = 0

	for i in range(0,size): 

		max_ending_here += a[i] 

		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 

		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1

	print ("Maximum contiguous sum is %d"%(max_so_far)) 


# Driver program to test maxSubArraySum 
arr = [] 
strg=input("enter elements").split()

for a in strg:
  arr.append(int(a))
maxSubArraySum(arr,len(arr)) 

=============================================================================
ans6:
x1,v1,x2,v2=input("x1 v1 x2 v2").split()


if (int(v2) < int(v1)) and ((int(x2) - int(x1)) % (int(v2) - int(v1))) == 0:
	print("YES")
else:
	print("NO")
=============================================================================
ans7:
n=input("numer of candles");
list1=[]
inpstr=input("height of candles").split()
for a in inpstr:
  list1.append(int(a))
if(len(list1)==n):
  x=max(list1)
  print(list1.count(x))
else:
  print("wrong number of candles")
============================================================================
ans8:


=============================================================================
